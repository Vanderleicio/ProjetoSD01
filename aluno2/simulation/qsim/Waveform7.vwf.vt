// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/03/2023 13:11:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DESPACHANTE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DESPACHANTE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] addres_req;
reg uart_rx_ready;
// wires                                               
wire [31:0] pin_to_module;

// assign statements (if any)                          
DESPACHANTE i1 (
// port map - connection between master ports and signals/registers   
	.addres_req(addres_req),
	.pin_to_module(pin_to_module),
	.uart_rx_ready(uart_rx_ready)
);
initial 
begin 
#1000000 $finish;
end 
// addres_req[ 4 ]
initial
begin
	addres_req[4] = 1'b0;
end 
// addres_req[ 3 ]
initial
begin
	addres_req[3] = 1'b0;
end 
// addres_req[ 2 ]
initial
begin
	addres_req[2] = 1'b0;
	addres_req[2] = #130000 1'b1;
	addres_req[2] = #120000 1'b0;
end 
// addres_req[ 1 ]
initial
begin
	addres_req[1] = 1'b0;
end 
// addres_req[ 0 ]
initial
begin
	addres_req[0] = 1'b1;
	addres_req[0] = #90000 1'b0;
end 

// uart_rx_ready
initial
begin
	uart_rx_ready = 1'b0;
	uart_rx_ready = #60000 1'b1;
	uart_rx_ready = #30000 1'b0;
	uart_rx_ready = #130000 1'b1;
	uart_rx_ready = #40000 1'b0;
end 
endmodule

